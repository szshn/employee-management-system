openapi: 3.0.3
info:
  title: Employee Management API
  version: 1.0.0
  description: Employee Management organized into departments and evaluated by managers.
paths:
  /:
    get:
      operationId: root_retrieve
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/login/:
    post:
      operationId: api_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/login/refresh/:
    post:
      operationId: api_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /attendances/:
    get:
      operationId: attendances_list
      parameters:
      - in: query
        name: date
        schema:
          type: string
          format: date
      - in: query
        name: employee
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - ABSENT
          - LATE
          - PRESENT
        description: |-
          * `PRESENT` - Present
          * `ABSENT` - Absent
          * `LATE` - Late
      tags:
      - attendances
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAttendanceList'
          description: ''
    post:
      operationId: attendances_create
      tags:
      - attendances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Attendance'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Attendance'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
  /attendances/{id}/:
    get:
      operationId: attendances_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - attendances
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
    put:
      operationId: attendances_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - attendances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Attendance'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Attendance'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
    patch:
      operationId: attendances_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - attendances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAttendance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAttendance'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAttendance'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
    delete:
      operationId: attendances_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - attendances
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /departments/:
    get:
      operationId: departments_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - departments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDepartmentList'
          description: ''
    post:
      operationId: departments_create
      tags:
      - departments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Department'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
  /departments/{id}/:
    get:
      operationId: departments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - departments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    put:
      operationId: departments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - departments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Department'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    patch:
      operationId: departments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - departments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    delete:
      operationId: departments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - departments
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /employees/:
    get:
      operationId: employees_list
      parameters:
      - in: query
        name: city
        schema:
          type: string
      - in: query
        name: department
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: state
        schema:
          type: string
      - in: query
        name: user__first_name
        schema:
          type: string
      - in: query
        name: user__is_active
        schema:
          type: boolean
      - in: query
        name: user__last_name
        schema:
          type: string
      tags:
      - employees
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEmployeeList'
          description: ''
    post:
      operationId: employees_create
      tags:
      - employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: ''
  /employees/{id}/:
    get:
      operationId: employees_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - employees
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: ''
    put:
      operationId: employees_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: ''
    patch:
      operationId: employees_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEmployee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEmployee'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEmployee'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: ''
    delete:
      operationId: employees_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - employees
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /performances/:
    get:
      operationId: performances_list
      parameters:
      - in: query
        name: employee
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: rating
        schema:
          type: integer
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5
        description: |-
          1 = Poor, 5 = Excellent

          * `1` - 1
          * `2` - 2
          * `3` - 3
          * `4` - 4
          * `5` - 5
      - in: query
        name: review_date
        schema:
          type: string
          format: date
      tags:
      - performances
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPerformanceList'
          description: ''
    post:
      operationId: performances_create
      tags:
      - performances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Performance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Performance'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Performance'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Performance'
          description: ''
  /performances/{id}/:
    get:
      operationId: performances_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - performances
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Performance'
          description: ''
    put:
      operationId: performances_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - performances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Performance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Performance'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Performance'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Performance'
          description: ''
    patch:
      operationId: performances_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - performances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPerformance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPerformance'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPerformance'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Performance'
          description: ''
    delete:
      operationId: performances_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - performances
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Attendance:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        employee:
          type: integer
        date:
          type: string
          format: date
          title: Attendance record date
        status:
          $ref: '#/components/schemas/StatusEnum'
      required:
      - employee
      - id
      - status
    Department:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 30
        employees:
          type: string
          readOnly: true
      required:
      - employees
      - id
      - name
    Employee:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          readOnly: true
        department:
          type: integer
          nullable: true
        phone:
          type: string
          description: 'Format: (123) 456-7890'
          pattern: ^\(\d{3}\) \d{3}-\d{4}$
          maxLength: 14
        is_staff:
          type: boolean
        is_active:
          type: boolean
        date_joined:
          type: string
          format: date-time
        address1:
          type: string
          maxLength: 100
        address2:
          type: string
          nullable: true
          maxLength: 100
        city:
          type: string
          maxLength: 30
        state:
          type: string
          description: 2-character US state code (e.g., 'CA', 'NY')
          maxLength: 2
        zipcode:
          type: string
          maxLength: 5
      required:
      - address1
      - city
      - date_joined
      - email
      - first_name
      - id
      - is_active
      - is_staff
      - last_name
      - phone
      - state
      - zipcode
    PaginatedAttendanceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Attendance'
    PaginatedDepartmentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Department'
    PaginatedEmployeeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
    PaginatedPerformanceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Performance'
    PatchedAttendance:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        employee:
          type: integer
        date:
          type: string
          format: date
          title: Attendance record date
        status:
          $ref: '#/components/schemas/StatusEnum'
    PatchedDepartment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 30
        employees:
          type: string
          readOnly: true
    PatchedEmployee:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          readOnly: true
        department:
          type: integer
          nullable: true
        phone:
          type: string
          description: 'Format: (123) 456-7890'
          pattern: ^\(\d{3}\) \d{3}-\d{4}$
          maxLength: 14
        is_staff:
          type: boolean
        is_active:
          type: boolean
        date_joined:
          type: string
          format: date-time
        address1:
          type: string
          maxLength: 100
        address2:
          type: string
          nullable: true
          maxLength: 100
        city:
          type: string
          maxLength: 30
        state:
          type: string
          description: 2-character US state code (e.g., 'CA', 'NY')
          maxLength: 2
        zipcode:
          type: string
          maxLength: 5
    PatchedPerformance:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        employee:
          type: integer
        review_date:
          type: string
          format: date
          title: Performance review date
        rating:
          allOf:
          - $ref: '#/components/schemas/RatingEnum'
          description: |-
            1 = Poor, 5 = Excellent

            * `1` - 1
            * `2` - 2
            * `3` - 3
            * `4` - 4
            * `5` - 5
          minimum: -2147483648
          maximum: 2147483647
    Performance:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        employee:
          type: integer
        review_date:
          type: string
          format: date
          title: Performance review date
        rating:
          allOf:
          - $ref: '#/components/schemas/RatingEnum'
          description: |-
            1 = Poor, 5 = Excellent

            * `1` - 1
            * `2` - 2
            * `3` - 3
            * `4` - 4
            * `5` - 5
          minimum: -2147483648
          maximum: 2147483647
      required:
      - employee
      - id
    RatingEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
      description: |-
        * `1` - 1
        * `2` - 2
        * `3` - 3
        * `4` - 4
        * `5` - 5
    StatusEnum:
      enum:
      - PRESENT
      - ABSENT
      - LATE
      type: string
      description: |-
        * `PRESENT` - Present
        * `ABSENT` - Absent
        * `LATE` - Late
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
